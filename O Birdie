<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Flappy Bird</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      background: linear-gradient(to bottom, #87CEEB, #b3e0ff);
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      font-family: sans-serif;
    }
    #gameContainer {
      position: relative;
      width: 90vw;
      max-width: 400px;
      height: 600px;
      overflow: hidden;
      background: #a0d8f1;
      border-radius: 10px;
      border: 3px solid #333;
    }

    .cloud {
      position: absolute;
      width: 80px;
      height: 40px;
      background: #ccc;
      border-radius: 40px;
      opacity: 0.5;
      top: 50px;
      animation: cloudMove 60s linear infinite;
    }

    .cloud::before, .cloud::after {
      content: '';
      position: absolute;
      background: #ccc;
      border-radius: 50%;
    }

    .cloud::before {
      width: 40px;
      height: 40px;
      left: -20px;
      top: 0;
    }

    .cloud::after {
      width: 50px;
      height: 50px;
      left: 30px;
      top: -10px;
    }

    @keyframes cloudMove {
      0% { left: 100%; }
      100% { left: -100px; }
    }

    .bird {
      position: absolute;
      width: 50px;
      height: 40px;
      background: linear-gradient(145deg, #ffeb3b, #fbc02d);
      border-radius: 50% 50% 40% 50%;
      top: 250px;
      left: 60px;
      z-index: 2;
      animation: flap 0.4s infinite;
    }

    .bird::before {
      content: "";
      position: absolute;
      width: 8px;
      height: 8px;
      background: black;
      border-radius: 50%;
      top: 10px;
      left: 35px;
    }

    .bird::after {
      content: "";
      position: absolute;
      width: 12px;
      height: 6px;
      background: orange;
      clip-path: polygon(0 0, 100% 50%, 0 100%);
      top: 18px;
      left: 45px;
    }

    @keyframes flap {
      0%, 100% { transform: rotate(-5deg); }
      50% { transform: rotate(5deg); }
    }

    .pipe {
      position: absolute;
      width: 60px;
      background: linear-gradient(to bottom, #4caf50, #2e7d32);
      z-index: 1;
    }

    .pipe::before {
      content: "";
      position: absolute;
      width: 80px;
      height: 20px;
      background: #66bb6a;
      left: -10px;
      border-radius: 5px;
    }

    .pipe.top::before { top: 0; }
    .pipe.bottom::before { bottom: 0; }
    .pipe.top { top: 0; }
    .pipe.bottom { bottom: 0; }

    @keyframes movePipe {
      from { left: 100%; }
      to { left: -80px; }
    }

    #score {
      position: absolute;
      top: 10px;
      left: 10px;
      color: #fff;
      font-size: 24px;
      font-weight: bold;
      text-shadow: 1px 1px 2px #000;
      z-index: 3;
    }

    #newGameBtn {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 10px 20px;
      background: #ff9800;
      color: #fff;
      border: none;
      border-radius: 5px;
      font-size: 18px;
      cursor: pointer;
      box-shadow: 2px 2px 5px #0004;
      z-index: 4;
    }

    #gameOver {
      position: absolute;
      top: 45%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 36px;
      color: red;
      font-weight: bold;
      display: none;
      z-index: 5;
      text-shadow: 2px 2px #fff;
    }
  </style>
</head>
<body>
  <div id="gameContainer">
    <div class="cloud" style="top:50px;"></div>
    <div class="cloud" style="top:100px; animation-delay: 20s;"></div>
    <div class="cloud" style="top:150px; animation-delay: 40s;"></div>

    <div id="score">Score: 0</div>
    <div class="bird" id="bird"></div>
    <div id="gameOver">Game Over</div>
    <button id="newGameBtn">New Game</button>
  </div>

  <script>
    const bird = document.getElementById("bird");
    const gameContainer = document.getElementById("gameContainer");
    const scoreDisplay = document.getElementById("score");
    const newGameBtn = document.getElementById("newGameBtn");
    const gameOverText = document.getElementById("gameOver");

    let birdY = 250;
    let gravity = 0.4;
    let velocity = 0;
    let isGameOver = false;
    let score = 0;
    let pipeInterval = null;
    let animationFrame = null;

    function resetGame() {
      cancelAnimationFrame(animationFrame);
      clearInterval(pipeInterval);
      document.querySelectorAll(".pipe").forEach(p => p.remove());
      birdY = 250;
      velocity = 0;
      score = 0;
      isGameOver = false;
      gameOverText.style.display = "none";
      scoreDisplay.innerText = "Score: 0";
      bird.style.top = birdY + "px";
      startGame();
    }

    function startGame() {
      pipeInterval = setInterval(() => {
        if (!isGameOver) createPipe();
      }, 2000);
      gameLoop();
    }

    function createPipe() {
      let gap = 200 - Math.floor(score / 5) * 10;
      if (gap < 120) gap = 120;

      const pipeHeight = Math.floor(Math.random() * 200) + 50;
      const speed = 5 - Math.min(score / 10, 3); // faster pipes up to speed 2s

      const topPipe = document.createElement("div");
      topPipe.classList.add("pipe", "top");
      topPipe.style.height = pipeHeight + "px";
      topPipe.style.left = "100%";
      topPipe.style.animation = `movePipe ${speed}s linear forwards`;

      const bottomPipe = document.createElement("div");
      bottomPipe.classList.add("pipe", "bottom");
      bottomPipe.style.height = (600 - pipeHeight - gap) + "px";
      bottomPipe.style.left = "100%";
      bottomPipe.style.animation = `movePipe ${speed}s linear forwards`;

      gameContainer.appendChild(topPipe);
      gameContainer.appendChild(bottomPipe);

      checkCollision(topPipe, bottomPipe);

      topPipe.addEventListener("animationend", () => topPipe.remove());
      bottomPipe.addEventListener("animationend", () => bottomPipe.remove());
    }

    function checkCollision(pipeTop, pipeBottom) {
      const interval = setInterval(() => {
        if (isGameOver) return clearInterval(interval);

        const birdRect = bird.getBoundingClientRect();
        const topRect = pipeTop.getBoundingClientRect();
        const bottomRect = pipeBottom.getBoundingClientRect();

        if (
          birdRect.left < topRect.right &&
          birdRect.right > topRect.left &&
          birdRect.top < topRect.bottom
        ) {
          endGame();
          clearInterval(interval);
        }

        if (
          birdRect.left < bottomRect.right &&
          birdRect.right > bottomRect.left &&
          birdRect.bottom > bottomRect.top
        ) {
          endGame();
          clearInterval(interval);
        }

        if (!pipeTop.passed && topRect.right < birdRect.left) {
          pipeTop.passed = true;
          score++;
          scoreDisplay.innerText = "Score: " + score;
        }
      }, 20);
    }

    function endGame() {
      isGameOver = true;
      clearInterval(pipeInterval);
      cancelAnimationFrame(animationFrame);
      gameOverText.style.display = "block";

      document.querySelectorAll('.pipe').forEach(p => {
        p.style.animationPlayState = 'paused';
      });
    }

    function gameLoop() {
      if (isGameOver) return;

      velocity += gravity;
      birdY += velocity;

      if (birdY < 0) birdY = 0;
      if (birdY > 560) {
        birdY = 560;
        endGame();
        return;
      }

      bird.style.top = birdY + "px";
      animationFrame = requestAnimationFrame(gameLoop);
    }

    function flap() {
      if (!isGameOver) {
        velocity = -5;
      }
    }

    document.addEventListener("keydown", flap);
    gameContainer.addEventListener("click", flap);
    gameContainer.addEventListener("touchstart", flap);
    newGameBtn.addEventListener("click", resetGame);

    startGame();
  </script>
</body>
</html>
